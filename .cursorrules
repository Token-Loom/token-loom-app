# Instructions

During your interaction with the user, if you find anything reusable in this project (e.g. version of a library, model name), especially about a fix to a mistake you made or a correction you received, you should take note in the `Lessons` section in the `.cursorrules` file so you will not make the same mistake again.

You should also use the `.cursorrules` file as a Scratchpad to organize your thoughts. Especially when you receive a new task, you should first review the content of the Scratchpad, clear old different task if necessary, first explain the task, and plan the steps you need to take to complete the task. You can use todo markers to indicate the progress, e.g.
[X] Task 1
[ ] Task 2

Also update the progress of the task in the Scratchpad when you finish a subtask.
Especially when you finished a milestone, it will help to improve your depth of task accomplishment to use the Scratchpad to reflect and plan.
The goal is to help you maintain a big picture as well as the progress of the task. Always refer to the Scratchpad when you plan the next step.

# Tools

Note all the tools are in python. So in the case you need to do batch processing, you can always consult the python files and write your own script.

## Screenshot Verification

The screenshot verification workflow allows you to capture screenshots of web pages and verify their appearance using LLMs. The following tools are available:

1. Screenshot Capture:

```bash
venv/bin/python tools/screenshot_utils.py URL [--output OUTPUT] [--width WIDTH] [--height HEIGHT]
```

2. LLM Verification with Images:

```bash
venv/bin/python tools/llm_api.py --prompt "Your verification question" --provider {openai|anthropic} --image path/to/screenshot.png
```

Example workflow:

```python
from screenshot_utils import take_screenshot_sync
from llm_api import query_llm

# Take a screenshot

screenshot_path = take_screenshot_sync('https://example.com', 'screenshot.png')

# Verify with LLM

response = query_llm(
    "What is the background color and title of this webpage?",
    provider="openai",  # or "anthropic"
    image_path=screenshot_path
)
print(response)
```

## LLM

You always have an LLM at your side to help you with the task. For simple tasks, you could invoke the LLM by running the following command:

```
venv/bin/python ./tools/llm_api.py --prompt "What is the capital of France?" --provider "anthropic"
```

The LLM API supports multiple providers:

- OpenAI (default, model: gpt-4o)
- Azure OpenAI (model: configured via AZURE_OPENAI_MODEL_DEPLOYMENT in .env file, defaults to gpt-4o-ms)
- DeepSeek (model: deepseek-chat)
- Anthropic (model: claude-3-sonnet-20240229)
- Gemini (model: gemini-pro)
- Local LLM (model: Qwen/Qwen2.5-32B-Instruct-AWQ)

But usually it's a better idea to check the content of the file and use the APIs in the `tools/llm_api.py` file to invoke the LLM if needed.

## Web browser

You could use the `tools/web_scraper.py` file to scrape the web.

```
venv/bin/python ./tools/web_scraper.py --max-concurrent 3 URL1 URL2 URL3
```

This will output the content of the web pages.

## Search engine

You could use the `tools/search_engine.py` file to search the web.

```
venv/bin/python ./tools/search_engine.py "your search keywords"
```

This will output the search results in the following format:

```
URL: https://example.com
Title: This is the title of the search result
Snippet: This is a snippet of the search result
```

If needed, you can further use the `web_scraper.py` file to scrape the web page content.

# Lessons

## User Specified Lessons

## Project-Specific

- Using lowercase hex colors in CSS to satisfy linting rules
- Need to keep shadcn/ui components minimal to maintain dark theme consistency
- The correct command for shadcn is `npx shadcn@latest` (not shadcn-ui)
- When setting up PostgreSQL locally, use your system username in the database URL instead of postgres:postgres
- Components using React hooks (like wallet adapter hooks) must be marked with 'use client' directive in Next.js 14 app router
- Use HTTP polling instead of WebSocket for simpler real-time updates in development
- When handling updates, use regular HTTP endpoints with appropriate status codes
- Keep marketing pages separate from app functionality pages for better organization
- Use DateRange type from react-day-picker for date range picker component
- Use proper badge variants (default, secondary, destructive) for status indicators
- Handle loading states in UI components to provide better user feedback
- Keep system configuration in a database for persistence across restarts
- Use upsert instead of update with create option to avoid type errors with Prisma

# Scratchpad

### Current Task: Adding LP Token Burn Support

Task Description: Add support for burning liquidity pool tokens along with regular tokens. LP tokens should have the same functionality as regular tokens, including immediate and controlled burns.

Implementation Steps:

[X] 1. Enhance Database Schema

- Add LP token type to distinguish between regular and LP tokens
- Add LP token pair information (token0, token1)
- Add LP token pool address
- Update burn statistics to track LP burns separately

[X] 2. Update Solana Integration

- Add LP token detection and balance fetching
- Add LP token metadata fetching
- Implement LP token burn instructions
- Update fee calculation for LP tokens

[X] 3. Update UI Components

- Enhance token selector to show LP tokens
- Add LP token information display
- Update burn form to handle LP tokens
- Add LP-specific fields and validation

[X] 4. Update Backend Services

- Modify burn scheduler for LP tokens
- Update status tracking for LP burns
- Enhance error handling for LP operations
- Update notification system for LP burns

[X] 5. Update API Endpoints

- Modify burn endpoints to handle LP tokens
- Add LP token validation
- Update response formats for LP data

[ ] 6. Testing and Documentation

- Test LP token detection
- Test immediate and controlled burns
- Test error scenarios
- Update documentation

Next Steps:

1. Test the LP token detection and burning functionality
2. Add error handling for LP-specific scenarios
3. Update documentation with LP token support

### Completed Changes:

1. Database Schema:

   - Added TokenType enum (REGULAR, LP)
   - Added LP token fields to BurnTransaction
   - Added LP token fields to BurnStatistic

2. Solana Integration:

   - Created LP token detection logic
   - Added LP token metadata fetching
   - Implemented LP token burn functionality
   - Added LP-specific fee handling

3. UI Components:

   - Updated token selector to show LP pairs
   - Added LP token details display
   - Modified burn form for LP tokens
   - Added type safety with TypeScript

4. Backend Services:

   - Updated burn scheduler for LP tokens
   - Enhanced error handling
   - Modified status tracking
   - Updated notification messages

5. API Endpoints:
   - Modified burn endpoint to handle LP data
   - Added LP token validation
   - Updated response format

### Remaining Tasks:

1. Testing:

   - Test LP token detection
   - Test burn operations
   - Test error scenarios

2. Documentation:
   - Update API documentation
   - Add LP token examples
   - Document new features

### Page Organization:

- `/` - Landing page with marketing sections
  - Banner
  - Live Statistics
  - How It Works
  - Benefits
  - FAQ
- `/burn` - Burn dashboard
  - Burn Form
  - Status Dashboard
  - Transaction History
- `/admin` - Admin dashboard
  - System Monitoring
  - Burn Schedule Management
  - Manual Controls

### Database Schema:

Current models:

- User (optional, for registered users)
  - Added email and notification preferences
- BurnWallet (for token burning)
- BurnTransaction (individual burn transactions)
  - Added execution history tracking
- ScheduledBurn (controlled burns)
  - Added retry mechanism
  - Added detailed status tracking
- BurnExecution (execution history)
  - Added detailed execution tracking
  - Added gas usage tracking
- Notification (user notifications)
  - Added various notification types
  - Added error tracking
- BurnStatistic (per-token statistics)
- GlobalStatistic (overall platform statistics)
- TokenMetric (analytics data)

### Solana Integration:

Current setup:

- Wallet connection with Phantom and Solflare support
- Custom wallet button with address display
- Network configuration (devnet/testnet/mainnet-beta)
- Custom RPC endpoint support
- Token balance fetching
- Token metadata fetching
- Burn transaction logic with progress tracking
- Transaction confirmation and explorer links
- Controlled burn scheduling
- Retry mechanism for failed burns
- Status updates via polling
- Status dashboard with auto-refresh
- Transaction history with filtering and export
- Admin controls for system management

### Current Task: Implementing Testing Framework

Task Description: Add comprehensive testing to the project, including unit tests, integration tests, and end-to-end tests.

Implementation Steps:

[X] 1. Set up Testing Framework

- Install Jest and React Testing Library ✓
- Configure Jest for Next.js and TypeScript ✓
- Set up test environment and mocks ✓
- Add test scripts to package.json ✓

[/] 2. Unit Tests

- Set up unit test structure ✓
- Test utility functions ✓
- Test hooks and custom hooks
- Test state management
- Test API client functions

[ ] 3. Integration Tests

- Test API endpoints
- Test database operations
- Test Solana interactions
- Test burn operations
- Test scheduling system

[ ] 4. Component Tests

- Test UI components
- Test form validations
- Test user interactions
- Test error states
- Test loading states

[ ] 5. End-to-End Tests

- Set up Cypress or Playwright
- Test critical user flows
- Test wallet integration
- Test burn workflows
- Test admin workflows

[ ] 6. CI/CD Integration

- Add GitHub Actions workflow
- Configure test automation
- Add test coverage reporting
- Add performance testing

Next Steps:

1. Create tests for custom hooks (useTokenBalances, useToast)
2. Test state management with React Query
3. Test API client functions

### Test Structure:

```
__tests__/
├── unit/
│   ├── utils/
│   ├── hooks/
│   └── api/
├── integration/
│   ├── api/
│   ├── db/
│   └── solana/
├── components/
│   ├── ui/
│   └── forms/
└── e2e/
    ├── flows/
    └── pages/
```

### Test Categories:

1. Unit Tests:

   - Utility functions ✓
   - Custom hooks
   - State management
   - API clients
   - Form validation

2. Integration Tests:

   - API endpoints
   - Database operations
   - Solana interactions
   - Burn operations
   - Scheduling system

3. Component Tests:

   - UI components
   - Form components
   - Error handling
   - Loading states
   - User interactions

4. E2E Tests:
   - User flows
   - Wallet connection
   - Burn workflows
   - Admin operations
   - Error scenarios

### Lessons Learned:

- When writing tests, always check the actual implementation before writing test expectations
- Use CommonJS format for Jest configuration files to avoid ESM-related issues
- Add eslint-disable comments for require() imports in Jest config files
- Keep test expectations precise and match the actual implementation behavior
